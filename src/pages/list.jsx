import React from 'react';
import {useRouter} from 'next/router';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import axios from 'axios';
import {buildListRequest} from '../functions/buildRequest';
import {Container, Button} from '@mui/material';
import ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';
import TrainIcon from '@mui/icons-material/Train';
import MapIcon from '@mui/icons-material/Map';
import CurrencyYenIcon from '@mui/icons-material/CurrencyYen';
import Header from '../components/common/header';

import styles from '../styles/List.module.scss';

import {parseCookies} from 'nookies';

/**
 * Listコンポーネント
 * @param {*} props
 * @return {Component}
 */
export default function List(props) {
  const router = useRouter();
  const query = props.params;
  const gourmetList = props.shop;
  const paging = props.paging;


  const detailPage = (shopId) => {
    const params = {
      id: shopId, // 店ID
      format: 'json', // レスポンス形式
    };
    router.push({
      pathname: '/detail',
      query: params,
    });
  };

  const nextPage = () => {
    const start = {
      start: parseInt(query.start) + 10,
    };
    router.push({
      pathname: '/list',
      query: start,
    });
  };
  const prevPage = () => {
    const start = {
      start: parseInt(query.start) - 10,
    };
    router.push({
      pathname: '/list',
      query: start,
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>周辺のお店</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header></Header>
      <main className={styles.main}>
        <Container maxWidth="md">
          <div className={styles.title_box}>
            <Link href='/'>
              <ArrowBackIosIcon fontSize='large' style={{color: '#333333'}}/>
            </Link>
            <h2>周辺のお店</h2>
          </div>

          <div className={styles.paging_box}>
            <Button
              disabled={!paging.canPrev}
              variant="outlined"
              onClick={prevPage}>prev</Button>
            <span>{paging.available}件 {paging.start}〜{paging.end}件を表示</span>
            <Button
              disabled={!paging.canNext}
              variant="outlined"
              onClick={nextPage}>next</Button>
          </div>

          <div className={styles.shop_card_container}>
            {gourmetList.map((val, i) => {
              return (
                <div
                  key={i}
                  className={styles.shop_card}
                  onClick={() => detailPage(val.id)}>
                  <Image
                    src={val.photo.pc.l}
                    width={150}
                    height={150}
                    alt={val.name}
                    style={{border: '1px solid #CCCCCC'}}
                  />
                  <div className={styles.shop_card_inner}>
                    <p className={styles.genre}>{val.genre.name}</p>
                    <p className={styles.name}>{val.name}</p>
                    <div className={styles.access}>
                      <TrainIcon />
                      <p>{val.access}</p>
                    </div>
                    <div className={styles.address}>
                      <MapIcon />
                      <p>{val.address}</p>
                    </div>
                    <div className={styles.budget}>
                      <CurrencyYenIcon />
                      <p>{val.budget.name}</p>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          <div className={styles.paging_box}>
            <Button
              disabled={!paging.canPrev}
              variant="outlined"
              onClick={prevPage}>prev</Button>
            <span>{paging.available}件 {paging.start}〜{paging.end}件を表示</span>
            <Button
              disabled={!paging.canNext}
              variant="outlined"
              onClick={nextPage}>next</Button>
          </div>

        </Container>
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  );
}

export const getServerSideProps = async (context) => {
  try {
    // Cookie取得
    const cookie = parseCookies(context);
    const params = JSON.parse(cookie.gourmetInfo);

    const start = parseInt(context.query.start);
    const url = buildListRequest(params, start);
    console.log(url);

    // ページネーション用フラグ
    let canPrev = false;
    let canNext = false;

    // お店取得
    const gourmet = await axios.get(url);
    const shop = gourmet.data.results.shop;
    const shopCount = gourmet.data.results.results_available;

    // ページネーション判定
    if ((start - parseInt(params.count)) > 0) {
      canPrev = true;
    }
    if ((start + parseInt(params.count) - 1) < shopCount) {
      canNext = true;
    }

    return {
      props: {
        params: context.query,
        shop,
        paging: {
          canPrev,
          canNext,
          available: shopCount,
          start: parseInt(start),
          end: shopCount < (start + 9) ? shopCount : (start + 9),
        },
      },
    };
  } catch (error) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
    };
  }
};
